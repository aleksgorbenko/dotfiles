#!/usr/bin/env bash

PYTHON_VESRION=3.11.3
RUBY_VESRION=3.2.2

source "${HOME}/.dotfiles/script/echos.sh"

bot "Welcome aboard, I will turn your mac into a dev machine now"

cd "$(dirname "$0")/.."
DOTS=$(pwd -P)

# exit if any command returns a non-zero code
set -e

# bot "Install latest OS updates"
# sudo softwareupdate -i -a

# Install command tools
if [[ `xcode-select -p 1>/dev/null;echo $?` != 0 ]];then
	bot "Installing latest xcode tools, the machine will be restarted after the installation is complete."
	sudo xcode-select --install
	sudo shutdown -r now
fi

if [ "$(arch)" == "arm64" ];then
	bot "Enable Rosetta 2"
	softwareupdate --install-rosetta
fi

bot "Enable installation from unverified developers"
sudo spctl --master-disable

#  BREW
if test ! $(which brew)
then
  bot "Installing Homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  # the below is only for M1
	(echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/gbko/.zprofile
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

function install_gitconfig () {
  if ! [ -f git/gitconfig.local ]
  then
    bot "Configuring gitconfig"
    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    running " - What is your github author name?"
    read -e git_authorname
    running " - What is your github author email?"
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.example > git/gitconfig.local

    print_success "gitconfig configured"
  fi
}

function install_dotfiles () {
	bot "Installing dotfiles"

	# make sure this folder exists
	mkdir -p "${HOME}/.config"

	# keyboard remapping
	mkdir -p "${HOME}/.config/karabiner"
	touch "${HOME}/.config/karabiner/karabiner.json"
	$DOTS/bin/link-file "${DOTS}/config/karabiner.edn" "${HOME}/.config/karabiner.edn"

	# theme config
	$DOTS/bin/link-file "${DOTS}/config/p10k.zsh" "${HOME}/.p10k.zsh"

	# alacritty config
	$DOTS/bin/link-file "${DOTS}/config/alacritty.yml" "${HOME}/.config/alacritty/alacritty.yml"

	# tmux config
	$DOTS/bin/link-file "${DOTS}/config/tmux.conf" "${HOME}/.tmux.conf"

	# k9s config
	$DOTS/bin/link-file "${DOTS}/config/k9s_hotkey.yml" "${HOME}/.k9s/hotkey.yml"

	# git config
	$DOTS/bin/link-file "${DOTS}/git/gitconfig" "${HOME}/.gitconfig"
	$DOTS/bin/link-file "${DOTS}/git/gitconfig.local" "${HOME}/.gitconfig.local"
	$DOTS/bin/link-file "${DOTS}/git/gitignore" "${HOME}/.gitignore"
	git config core.hooksPath "${DOTS}git/hooks/"

	# zsh
	$DOTS/bin/link-file "${DOTS}/zsh/zshrc" "${HOME}/.zshrc"
	$DOTS/bin/link-file "${DOTS}/zsh/zsh_plugins.txt" "${HOME}/.zsh_plugins.txt"

	# convenience
	$DOTS/bin/link-file "${Home}/Dropbox/src" "${HOME}/src"
}

function install_brew_packages () {
	if [ "$(uname -s)" == "Darwin" ]
	then
		bot "Installing brew packages"
		if source bin/dot | while read -r data; do echo -e "$data"; done
		then
			ok "Dependencies installed"
		else
			print_error "Error installing dependencies"
		fi
	fi
}

function install_extras () {
	bot "Installing fonts"
	git clone https://github.com/powerline/fonts.git --depth=1
	cd fonts
	./install.sh
	cd ..
	rm -rf fonts
	ok

	bot "Installing extra plugins"
	if [[ ! -d "${HOME}/.dotfiles/zsh/plugins/fzf-tab" ]]; then
		running "fzf-tab"
		git clone https://github.com/Aloxaf/fzf-tab ${DOTS}/zsh/plugins/fzf-tab
		ok
	fi

	bot "Configuring fzf"
	# this will install extras and bindings for fzf, e.g ctrl+r history search
	# .zshrc will be modified
	yes | $(brew --prefix)/opt/fzf/install
	ok

	if [[ ! -e "${HOME}/.dotfiles/zsh/plugins/forgit.plugin.zsh" ]]; then
		running "forgit"
		curl -s https://raw.githubusercontent.com/wfxr/forgit/master/forgit.plugin.zsh -o ${DOTS}/zsh/plugins/forgit.plugin.zsh
		ok
	fi

	bot "Install Karabiner Settings"
	goku
}

function install_lang () {
	# install nvm and LTS node
	if [[ ! -s "${HOME}/.nvm/nvm.sh"  ]]; then
		curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
		nvm install --lts
	fi

	# install python
	if [[ -x "$(brew --prefix)/bin/pyenv" ]]; then
		$(brew --prefix)/bin/pyenv install $PYTHON_VESRION
		$(brew --prefix)/bin/pyenv global $PYTHON_VESRION
	fi

	# install ruby
	if [[ -x "$(brew --prefix)/bin/rbenv" ]]; then
		"$(brew --prefix)/bin/rbenv" install $RUBY_VESRION
		"$(brew --prefix)/bin/rbenv" global $RUBY_VESRION
	fi
}

# Do we need to ask for sudo password or is it already passwordless?
# grep -q 'NOPASSWD:     ALL' /etc/sudoers.d/$LOGNAME > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#   echo "no suder file"
#   sudo -v

#   # Keep-alive: update existing sudo time stamp until the script has finished
#   while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# fi

install_gitconfig
install_dotfiles
$DOTS/macos/set-defaults.sh
install_brew_packages
install_extras
install_lang

ok 'Done! May the Force be with you!'
